%% Problem 1-C: Find Solution u(x) to 1-B and plot for epsilon = {1,0.1,0.01, and more}
syms u(x)       % u(x)
syms y          % epsilon
ode = -y*diff(u,x,2) == 1-9*u;
Du = diff(u,x);
cond1 = u(0) == 0;
cond2 = u(1) == 0;
conds = [cond1 cond2];
uSol(x) = dsolve(ode,conds)   % solve the od
uSol = simplify(uSol);

% Plot solution uSol for several values of epsilon (y)
figure();
title('Solution u for several values of epsilon (y)')
fplot([subs(uSol, y, 1) subs(uSol, y, .1) subs(uSol, y, .01) ...
    subs(uSol, y, .001) subs(uSol, y, .0001)],[0,1]);
% As shown in the plot, as epsilon goes to 0 function converges to boundary
% of 1/9. This is because the two variable terms move to 0 faster as
% epsilon decreases

%% Plot Graph of OSU using an Adjacency Matrix
Adjacency = [0 10 0 0 0 0 0 0 12;... 
     10 0 0 0 1 0 0 0 0;...
     0 0 0 3 0 1 0 2 0;...
     0 0 3 0 1 2 0 0 0;...
     0 1 0 1 0 0 0 0 0;...
     0 0 1 2 0 0 1 1 0;...
     0 0 0 0 0 1 0 1 0;...
     0 0 2 0 0 1 1 0 3;...
     12 0 0 0 0 0 0 3 0;];
figure();
G = graph(Adjacency);
x_graph = [0  10 3 8 10 6 6 3 0];
y_graph = [12 12 8 9 11 7 6 6 0];
plot(G,'XData',x_graph,'YData',y_graph,'EdgeLabel',G.Edges.Weight)
title('Map of OSU with Overlay of Population Density')
hold on

%% Create Equilibrium Model of the Network Defined Above
l = [10 5 12 1 3 2 1 2 1 1 3];
c = l.^(-1);
C = diag(c);
A = [-1 1 0 0 0 0 0 0 0;...
     0  1 0 0 -1 0 0 0 0;...
     -1 0 0 0 0 0 0 0 1;...
     0 0 0 1 -1 0 0 0 0;...
     0 0 -1 1 0 0 0 0 0;...
     0 0 0 1 0 -1 0 0 0;...
     0 0 -1 0 0 1 0 0 0;...
     0 -1 0 0 0 0 0 1 0;...
     0 0 0 0 0 -1 1 0 0;...
     0 0 0 0 0 0 1 -1 0;...
     0 0 0 0 0 0 0 1 -1;];
 
K = A'*C*A;
K_reduced = K([3:6 8:9], [3:6 8:9]);
x_1 = 0;
x_2 = 0;
x_7 = 100;
Externals = [0 0 0 x_7/2 x_7/2 0]';
x = K_reduced \ Externals;
%% Other stuff
people = cat(1, [x_1 x_2 x(1) x(2) x(3) x(4) x_7 x(5) x(6)]) % don't know why I can't put x(1:4)
%people = cat(1,[x_1 x_2]');
%people = cat(1, people,x(1:4));
%people = cat(1, people,x_7);
%people = cat(1, people,x(5:end));

scatter(x_graph',y_graph',people+100,people,'filled');
%% Last Part of Problem 2 - Take out the Uber exit (Burt Hall Parking Lot and See the Difference)
figure();
Adjacency = [0 0 0 0 0 0 0 0 0;... 
     0 0 0 0 1 0 0 0 0;...
     0 0 0 3 0 1 0 2 0;...
     0 0 3 0 1 2 0 0 0;...
     0 1 0 1 0 0 0 0 0;...
     0 0 1 2 0 0 1 1 0;...
     0 0 0 0 0 1 0 1 0;...
     0 0 2 0 0 1 1 0 3;...
     0 0 0 0 0 0 0 3 0;];
G = graph(Adjacency);
x_graph = [0  10 3 8 10 6 6 3 0];
y_graph = [12 12 8 9 11 7 6 6 0];
plot(G,'XData',x_graph,'YData',y_graph,'EdgeLabel',G.Edges.Weight)
title('Map v2')
hold on

A = [0 0 0 0 0 0 0 0 0;...
     0  1 0 0 -1 0 0 0 0;...
     0 0 0 0 0 0 0 0 1;...
     0 0 0 1 -1 0 0 0 0;...
     0 0 -1 1 0 0 0 0 0;...
     0 0 0 1 0 -1 0 0 0;...
     0 0 -1 0 0 1 0 0 0;...
     0 -1 0 0 0 0 0 1 0;...
     0 0 0 0 0 -1 1 0 0;...
     0 0 0 0 0 0 1 -1 0;...
     0 0 0 0 0 0 0 1 -1;];

K = A'*C*A;
K_reduced = K([3:6 8:9], [3:6 8:9]);
x_1 = 0;
x_2 = 0;
x_7 = 100;
Externals = [0 0 0 x_7/2 x_7/2 0]';
x = K_reduced \ Externals;
people = cat(1, [x_1 x_2 x(1) x(2) x(3) x(4) x_7 x(5) x(6)])
scatter(x_graph',y_graph',people+100,people,'filled');


%% Trying out with Burt Hall Parking Lot connected to KEC instead of bus stop (length still = 10)
figure();
l = [10 5 12 1 3 2 1 2 1 1 3];
c = l.^(-1);
C = diag(c);
Adjacency = [0 0 10 0 0 0 0 0 12;... 
     0 0 0 0 1 0 0 0 0;...
     10 0 0 3 0 1 0 2 0;...
     0 0 3 0 1 2 0 0 0;...
     0 1 0 1 0 0 0 0 0;...
     0 0 1 2 0 0 1 1 0;...
     0 0 0 0 0 1 0 1 0;...
     0 0 2 0 0 1 1 0 3;...
     12 0 0 0 0 0 0 3 0;];
G = graph(Adjacency);
x_graph = [0  10 3 8 10 6 6 3 0];
y_graph = [12 12 8 9 11 7 6 6 0];
plot(G,'XData',x_graph,'YData',y_graph,'EdgeLabel',G.Edges.Weight)
title('Map of OSU with Overlay of Population Density')

hold on

A = [-1 0 1 0 0 0 0 0 0;...
     0  1 0 0 -1 0 0 0 0;...
     -1 0 0 0 0 0 0 0 1;...
     0 0 0 1 -1 0 0 0 0;...
     0 0 -1 1 0 0 0 0 0;...
     0 0 0 1 0 -1 0 0 0;...
     0 0 -1 0 0 1 0 0 0;...
     0 -1 0 0 0 0 0 1 0;...
     0 0 0 0 0 -1 1 0 0;...
     0 0 0 0 0 0 1 -1 0;...
     0 0 0 0 0 0 0 1 -1;];

K = A'*C*A;
K_reduced = K([3:6 8:9], [3:6 8:9]);
x_1 = 0;
x_2 = 0;
x_7 = 100;
Externals = [0 0 0 x_7/2 x_7/2 0]';
x = K_reduced \ Externals;
people = cat(1, [x_1 x_2 x(1) x(2) x(3) x(4) x_7 x(5) x(6)])
scatter(x_graph',y_graph',people+100,people,'filled');


%% Problem 3 - Extend EQ model into a time dependent problem

tspan = [0 10];
x0 = zeros(1,9);
x0(9) = 45000; % set reser stadium to 45000
%x0(7) = 10000;
x0 = rand(1,9)*10000

[t, x_t] = ode45(@(t,x_t) -K*x_t, tspan, x0);

foo = figure();
plot(t,x_t,'-');
title('Time-dependent Model of Population Diffusion from Reser');
legend('Uber','Bus','KEC','Dearborn','Graf','Kidder','Library','MU','Reser Stadium');


%%
timesteps = 125;
v = VideoWriter('populationDrain');
open(v);
for j = 1:timesteps
   plot(G,'XData',x_graph,'YData',y_graph,'EdgeLabel',G.Edges.Weight)
   scatter(x_graph',y_graph',x_t(j,:)+100,x_t(j,:),'filled');
   frame = getframe(gcf);
   writeVideo(v,frame);
end
close(v);